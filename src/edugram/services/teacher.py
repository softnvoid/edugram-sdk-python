# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import AssignmentSchemaOut, CoursesSchemaOut, Teacher


class TeacherService(BaseService):

    @cast_models
    def add_teacher_teacher_new_post(self, request_body: Teacher) -> any:
        """add_teacher_teacher_new_post

        :param request_body: The request body.
        :type request_body: Teacher
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Teacher).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/teacher/new", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def get_courses_data_by_tg_id_teacher_tg_tg_id_courses_get(
        self, tg_id: str
    ) -> List[CoursesSchemaOut]:
        """get_courses_data_by_tg_id_teacher_tg_tg_id_courses_get

        :param tg_id: tg_id
        :type tg_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[CoursesSchemaOut]
        """

        Validator(str).validate(tg_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/teacher/tg/{{tg_id}}/courses",
                self.get_default_headers(),
            )
            .add_path("tg_id", tg_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [CoursesSchemaOut._unmap(item) for item in response]

    @cast_models
    def get_by_id_teacher_id_id_get(self, id_: str) -> Teacher:
        """get_by_id_teacher_id_id_get

        :param id_: id_
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Teacher
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(f"{self.base_url}/teacher/id/{{id}}", self.get_default_headers())
            .add_path("id", id_)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return Teacher._unmap(response)

    @cast_models
    def get_ready_assignments_teacher_courses_course_id_assignments_ready_get(
        self, course_id: str
    ) -> List[AssignmentSchemaOut]:
        """get_ready_assignments_teacher_courses_course_id_assignments_ready_get

        :param course_id: course_id
        :type course_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[AssignmentSchemaOut]
        """

        Validator(str).validate(course_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/teacher/courses/{{course_id}}/assignments/ready",
                self.get_default_headers(),
            )
            .add_path("course_id", course_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [AssignmentSchemaOut._unmap(item) for item in response]
