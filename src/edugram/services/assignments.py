# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Assignment


class AssignmentsService(BaseService):

    @cast_models
    def add_assignment_assignments_new_post(self, request_body: Assignment) -> any:
        """add_assignment_assignments_new_post

        :param request_body: The request body.
        :type request_body: Assignment
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Assignment).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/assignments/new", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def add_assignments_assignments_new_many_post(
        self, request_body: List[Assignment]
    ) -> any:
        """add_assignments_assignments_new_many_post

        :param request_body: The request body.
        :type request_body: List[Assignment]
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Assignment).is_array().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/assignments/new_many", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def get_by_id_assignments_id_get(self, id_: str) -> Assignment:
        """get_by_id_assignments_id_get

        :param id_: id_
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Assignment
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(
                f"{self.base_url}/assignments/{{id}}", self.get_default_headers()
            )
            .add_path("id", id_)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return Assignment._unmap(response)
