# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class AuthService(BaseService):

    @cast_models
    def get_user_status_auth_check_user_tg_id_get(self, tg_id: str) -> any:
        """get_user_status_auth_check_user_tg_id_get

        :param tg_id: tg_id
        :type tg_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).validate(tg_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/auth/check_user/{{tg_id}}", self.get_default_headers()
            )
            .add_path("tg_id", tg_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return response
