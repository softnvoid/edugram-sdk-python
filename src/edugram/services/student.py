# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import (
    Order,
    Status,
    Student,
    StudentAssignmentSchemaOutList,
    StudentAssignmentShortSchemaOut,
    StudentCoursesList,
    StudentLessonSchemaOut,
    StudentShortSchemaOut,
    StudentWeekdayLessonsSchemaOut,
)


class StudentService(BaseService):

    @cast_models
    def add_student_student_new_post(self, request_body: Student) -> any:
        """add_student_student_new_post

        :param request_body: The request body.
        :type request_body: Student
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Student).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/student/new", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def add_students_student_new_many_post(self, request_body: List[Student]) -> any:
        """add_students_student_new_many_post

        :param request_body: The request body.
        :type request_body: List[Student]
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Student).is_array().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/student/new_many", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def get_by_id_student_id_id_get(self, id_: str) -> Student:
        """get_by_id_student_id_id_get

        :param id_: id_
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Student
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(f"{self.base_url}/student/id/{{id}}", self.get_default_headers())
            .add_path("id", id_)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return Student._unmap(response)

    @cast_models
    def get_all_students_student_all_get(self) -> List[StudentShortSchemaOut]:
        """get_all_students_student_all_get

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[StudentShortSchemaOut]
        """

        serialized_request = (
            Serializer(f"{self.base_url}/student/all", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [StudentShortSchemaOut._unmap(item) for item in response]

    @cast_models
    def get_by_tg_id_student_tg_tg_id_get(self, tg_id: str) -> Student:
        """get_by_tg_id_student_tg_tg_id_get

        :param tg_id: tg_id
        :type tg_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Student
        """

        Validator(str).validate(tg_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{tg_id}}", self.get_default_headers()
            )
            .add_path("tg_id", tg_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return Student._unmap(response)

    @cast_models
    def get_student_courses_by_id_student_id_id_courses_get(
        self, id_: str
    ) -> StudentCoursesList:
        """get_student_courses_by_id_student_id_id_courses_get

        :param id_: id_
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: StudentCoursesList
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/id/{{id}}/courses", self.get_default_headers()
            )
            .add_path("id", id_)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return StudentCoursesList._unmap(response)

    @cast_models
    def get_student_courses_by_tg_student_tg_tg_id_courses_get(
        self, tg_id: str
    ) -> StudentCoursesList:
        """get_student_courses_by_tg_student_tg_tg_id_courses_get

        :param tg_id: tg_id
        :type tg_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: StudentCoursesList
        """

        Validator(str).validate(tg_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{tg_id}}/courses",
                self.get_default_headers(),
            )
            .add_path("tg_id", tg_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return StudentCoursesList._unmap(response)

    @cast_models
    def get_student_assingments_by_tg_student_tg_tg_id_assignments_get(
        self, tg_id: str
    ) -> StudentAssignmentSchemaOutList:
        """get_student_assingments_by_tg_student_tg_tg_id_assignments_get

        :param tg_id: tg_id
        :type tg_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: StudentAssignmentSchemaOutList
        """

        Validator(str).validate(tg_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{tg_id}}/assignments",
                self.get_default_headers(),
            )
            .add_path("tg_id", tg_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return StudentAssignmentSchemaOutList._unmap(response)

    @cast_models
    def get_student_assignments_by_course_student_tg_tg_id_course_course_id_assignments_get(
        self, tg_id: str, course_id: str
    ) -> List[StudentAssignmentShortSchemaOut]:
        """get_student_assignments_by_course_student_tg_tg_id_course_course_id_assignments_get

        :param tg_id: tg_id
        :type tg_id: str
        :param course_id: course_id
        :type course_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[StudentAssignmentShortSchemaOut]
        """

        Validator(str).validate(tg_id)
        Validator(str).validate(course_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{tg_id}}/course/{{course_id}}/assignments",
                self.get_default_headers(),
            )
            .add_path("tg_id", tg_id)
            .add_path("course_id", course_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [StudentAssignmentShortSchemaOut._unmap(item) for item in response]

    @cast_models
    def get_student_week_assignments_by_tg_student_tg_tg_id_week_assignments_get(
        self, tg_id: str, date_of_week: str = SENTINEL
    ) -> List[StudentAssignmentShortSchemaOut]:
        """get_student_week_assignments_by_tg_student_tg_tg_id_week_assignments_get

        :param tg_id: tg_id
        :type tg_id: str
        :param date_of_week: date of the week, defaults to None
        :type date_of_week: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[StudentAssignmentShortSchemaOut]
        """

        Validator(str).validate(tg_id)
        Validator(str).is_optional().validate(date_of_week)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{tg_id}}/week_assignments",
                self.get_default_headers(),
            )
            .add_path("tg_id", tg_id)
            .add_query("date_of_week", date_of_week)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [StudentAssignmentShortSchemaOut._unmap(item) for item in response]

    @cast_models
    def get_student_lessons_by_tg_student_tg_tg_id_lessons_get(
        self, tg_id: str
    ) -> List[StudentLessonSchemaOut]:
        """get_student_lessons_by_tg_student_tg_tg_id_lessons_get

        :param tg_id: tg_id
        :type tg_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[StudentLessonSchemaOut]
        """

        Validator(str).validate(tg_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{tg_id}}/lessons",
                self.get_default_headers(),
            )
            .add_path("tg_id", tg_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [StudentLessonSchemaOut._unmap(item) for item in response]

    @cast_models
    def get_student_lessons_by_tg_student_tg_tg_id_schedule_get(
        self,
        tg_id: str,
        date_of_week: str = SENTINEL,
        step: int = SENTINEL,
        order: Order = SENTINEL,
    ) -> List[StudentWeekdayLessonsSchemaOut]:
        """get_student_lessons_by_tg_student_tg_tg_id_schedule_get

        :param tg_id: tg_id
        :type tg_id: str
        :param date_of_week: date of the week, defaults to None
        :type date_of_week: str, optional
        :param step: Step for pagination: 0 - current week, 1 - next week, -1 - previous week, defaults to None
        :type step: int, optional
        :param order: Sort order: asc or desc, defaults to None
        :type order: Order, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[StudentWeekdayLessonsSchemaOut]
        """

        Validator(str).validate(tg_id)
        Validator(str).is_optional().validate(date_of_week)
        Validator(int).is_optional().validate(step)
        Validator(Order).is_optional().validate(order)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{tg_id}}/schedule",
                self.get_default_headers(),
            )
            .add_path("tg_id", tg_id)
            .add_query("date_of_week", date_of_week)
            .add_query("step", step)
            .add_query("order", order)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [StudentWeekdayLessonsSchemaOut._unmap(item) for item in response]

    @cast_models
    def change_assignment_status_student_tg_student_tg_assignments_assignment_id_status_patch(
        self, student_tg: str, assignment_id: str, status: Status
    ) -> any:
        """change_assignment_status_student_tg_student_tg_assignments_assignment_id_status_patch

        :param student_tg: student_tg
        :type student_tg: str
        :param assignment_id: assignment_id
        :type assignment_id: str
        :param status: status
        :type status: Status
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).validate(student_tg)
        Validator(str).validate(assignment_id)
        Validator(Status).validate(status)

        serialized_request = (
            Serializer(
                f"{self.base_url}/student/tg/{{student_tg}}/assignments/{{assignment_id}}/status",
                self.get_default_headers(),
            )
            .add_path("student_tg", student_tg)
            .add_path("assignment_id", assignment_id)
            .add_query("status", status)
            .serialize()
            .set_method("PATCH")
        )

        response, _, _ = self.send_request(serialized_request)
        return response
