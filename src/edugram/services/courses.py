# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import AssignmentDataOUt, Course, StudentDataOUt


class CoursesService(BaseService):

    @cast_models
    def add_course_courses_new_post(self, request_body: Course) -> any:
        """add_course_courses_new_post

        :param request_body: The request body.
        :type request_body: Course
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Course).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/courses/new", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def add_courses_courses_new_many_post(self, request_body: List[Course]) -> any:
        """add_courses_courses_new_many_post

        :param request_body: The request body.
        :type request_body: List[Course]
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Course).is_array().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/courses/new_many", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def get_by_id_courses_id_get(self, id_: str) -> Course:
        """get_by_id_courses_id_get

        :param id_: id_
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Course
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(f"{self.base_url}/courses/{{id}}", self.get_default_headers())
            .add_path("id", id_)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return Course._unmap(response)

    @cast_models
    def get_students_data_courses_course_id_students_get(
        self, course_id: str
    ) -> List[StudentDataOUt]:
        """get_students_data_courses_course_id_students_get

        :param course_id: course_id
        :type course_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[StudentDataOUt]
        """

        Validator(str).validate(course_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/courses/{{course_id}}/students",
                self.get_default_headers(),
            )
            .add_path("course_id", course_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [StudentDataOUt._unmap(item) for item in response]

    @cast_models
    def get_students_data_courses_course_id_assignments_get(
        self, course_id: str
    ) -> List[AssignmentDataOUt]:
        """get_students_data_courses_course_id_assignments_get

        :param course_id: course_id
        :type course_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[AssignmentDataOUt]
        """

        Validator(str).validate(course_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/courses/{{course_id}}/assignments",
                self.get_default_headers(),
            )
            .add_path("course_id", course_id)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [AssignmentDataOUt._unmap(item) for item in response]

    @cast_models
    def add_student_update_data_courses_student_post(
        self, course_id: str, student_id: str
    ) -> any:
        """add_student_update_data_courses_student_post

        :param course_id: course_id
        :type course_id: str
        :param student_id: student_id
        :type student_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).validate(course_id)
        Validator(str).validate(student_id)

        serialized_request = (
            Serializer(f"{self.base_url}/courses/student", self.get_default_headers())
            .add_query("course_id", course_id)
            .add_query("student_id", student_id)
            .serialize()
            .set_method("POST")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def add_assignment_courses_assignment_post(
        self, course_id: str, assignment_id: str
    ) -> any:
        """add_assignment_courses_assignment_post

        :param course_id: course_id
        :type course_id: str
        :param assignment_id: assignment_id
        :type assignment_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).validate(course_id)
        Validator(str).validate(assignment_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/courses/assignment", self.get_default_headers()
            )
            .add_query("course_id", course_id)
            .add_query("assignment_id", assignment_id)
            .serialize()
            .set_method("POST")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def add_lesson_courses_lesson_post(self, course_id: str, lesson_id: str) -> any:
        """add_lesson_courses_lesson_post

        :param course_id: course_id
        :type course_id: str
        :param lesson_id: lesson_id
        :type lesson_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).validate(course_id)
        Validator(str).validate(lesson_id)

        serialized_request = (
            Serializer(f"{self.base_url}/courses/lesson", self.get_default_headers())
            .add_query("course_id", course_id)
            .add_query("lesson_id", lesson_id)
            .serialize()
            .set_method("POST")
        )

        response, _, _ = self.send_request(serialized_request)
        return response
